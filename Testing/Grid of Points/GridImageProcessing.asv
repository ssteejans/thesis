%% Grid of Points Image Processing
% Samuel S. Artho-Bentz


%% Clean Up
clc
clear all
close all

%% Read in Photo
myPhoto = imread('img_7849.jpg');

%% Find location of red reference points
% The red dots are 12 inches apart
redDots=myImgStats(myPhoto,1);

%% Calculate a Vertical Scale for pixels per inch
% Find vertical distances between points in pixels

vDist = [redDots(1,2)-redDots(3,2), redDots(2,2)-redDots(3,2), redDots(1,2)-redDots(2,2)];

% Actual distance in inches

vDistRef=[12, 12, 0];

% Apply simple linear regression to find a conversion between pixels and inches in the vertical direction
% Measurement[inches] = vertreg(1) * Measurement[pixels] + vertreg(2)

vertReg=myLinReg(vDist,vDistRef);

% Verify linear regression is reasonable
vDistCheck=vertReg(1)* vDist + vertReg(2);

%% Calculate a Horizontal Scale for pixels per inch
% Find Horizontal distances between points in pixels

hDist = [redDots(1,1)-redDots(3,1), redDots(2,1)-redDots(3,1), redDots(1,1)-redDots(2,1)];

% Actual distance in inches

hDistRef=[12, 0, 12];

% Apply simple linear regression to find a conversion between pixels and inches in the vertical direction
% Measurement[inches] = vertreg(1) * Measurement[pixels] + vertreg(2)

horReg=myLinReg(hDist,hDistRef);

% Verify linear regression is reasonable
hDistCheck=horReg(1)* hDist + horReg(2);

%% Find all black dots

myGSPhoto=rgb2gray(myPhoto);
myBWPhoto=myGSPhoto<100;
rp=regionprops(myBWPhoto,myGSPhoto,'Centroid');
centroids = cat(1, rp.Centroid);

% Remove the centroids of the red dots from the list
for i = 1:length(centroids)
    if i > length(centroids)
        break
    end
    if ((centroids(i,1)>redDots(1,1)*.9) && (centroids(i,1)<redDots(1,1)*1.1)) && ((centroids(i,2)>redDots(1,2)*.9) && (centroids(i,2)<redDots(1,2)*1.1))
        centroids(i,:)=[];
    end
    if ((centroids(i,1)>redDots(2,1)*.9) && (centroids(i,1)<redDots(2,1)*1.1)) && ((centroids(i,2)>redDots(2,2)*.9) && (centroids(i,2)<redDots(2,2)*1.1))
        centroids(i,:)=[];
    end
    if ((centroids(i,1)>redDots(3,1)*.9) && (centroids(i,1)<redDots(3,1)*1.1)) && ((centroids(i,2)>redDots(3,2)*.9) && (centroids(i,2)<redDots(3,2)*1.1))
        centroids(i,:)=[];
    end
end

%% Find the matching pairs of points by looking for those that are within 150 pixels of each other.
pairIndex = 1;
for i = 1:length(centroids)
    for j = 1:length(centroids)
        if (i~=j)&& (j>i)
            if hypot(centroids(i,1)-centroids(j,1), centroids(i,2)-centroids(j,2))<150
                centroidPairs(pairIndex, :) = [i,j];
                pairIndex= pairIndex +1;
            end
        end
    end
end

% figure(); 
% image(myPhoto); 
% axis image; 
% hold on;
% plot(centroids(:,1),centroids(:,2), 'b*')
% hold off

%% Convert centroid coordinates from pixels to inches using the scales above
centroidsInches(:,1) = horReg(1) * centroids(:,1) + horReg(2);
centroidsInches(:,2) = vertReg(1) * centroids(:,2) + vertReg(2);

%% Create new variable pair data
for i = 1:length(centroidPairs)
    % pairedCoord = [p1x p1y p2x p2y]
    pairedCoord(i,:) = [centroidsInches(centroidPairs(i,1),1) centroidsInches(centroidPairs(i,1),2) centroidsInches(centroidPairs(i,2),1) centroidsInches(centroidPairs(i,2),2)];
end

%% Find distance between each pair of points
for i = 1:length(centroidPairs)
    pairDistance(i,1) = hypot(pairedCoord(i,1)-pairedCoord(i,3),pairedCoord(i,2)-pairedCoord(i,4));
end

%% use the distance from the board (known)
% define one dot (center bottom) as 'correct'
% use locations of all the dots, along with the commanded angles, to do
% some sort of error? +/- theoretical angle?

%% Reassociate all points with new origin
% New origin at bottom middle pair 
originPair = 15; % Determined manually
originCoord = [mean([pairedCoord(originPair, 1), pairedCoord(originPair,3)]) mean([pairedCoord(originPair, 2), pairedCoord(originPair,4)])];

% All points minus 






